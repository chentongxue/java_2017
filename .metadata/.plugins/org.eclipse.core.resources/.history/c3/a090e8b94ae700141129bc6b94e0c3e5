package a_shengnan.a_mianshi.wm.excutor;

import java.util.ArrayDeque;
import java.util.Queue;
import java.util.concurrent.Executor;

public class MyExcutor implements Executor{
	private final Queue<Runnable> tasks = new ArrayDeque<Runnable>();
	private final static Executor executor;
	private Runnable active;
	public MyExcutor(Executor executor){
		this.executor = executor;
	}

	@Override
	public synchronized void execute(final Runnable command) {
		tasks.offer(new Runnable() {
			
			@Override
			public void run() {
				try {
					command.run();
				} finally {
					scheduleNext();
				}
				
			}
		});
		
	}
	protected synchronized void scheduleNext() {
		if((active = tasks.poll()) != null){
			executor.execute(active);
		}
		
	}
	public void display(){
		if(tasks.isEmpty()){
			System.out.println("this is null");
		}
		for(Runnable r : tasks){
			System.out.println(r.toString());
		}
	}
	public static void main(String[] args) {
		Runnable r1 = new Runnable() {
			@Override
			public void run() {
				int i = 0;
				System.out.println(" i = " + (++i));
			}
		};
		Runnable r2 = new Runnable() {
			@Override
			public void run() {
				int a = 3;
				System.out.println(" a = " + (++a));
			}
		};
		Runnable r3 = new Runnable() {
			@Override
			public void run() {
				int b = 7;
				System.out.println(" b = " + (++b));
			}
		};
		MyExcutor m = new MyExcutor(executor);
		m.execute(r1);
		m.execute(r2);
		m.execute(r3);
		m.display();
	}
}
