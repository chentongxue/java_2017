package sacred.alliance.magic.app.compass;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import lombok.Data;
import sacred.alliance.magic.app.chat.ChannelType;
import sacred.alliance.magic.app.compass.logic.CompassLogic;
import sacred.alliance.magic.app.compass.logic.CompassLogicType;
import sacred.alliance.magic.base.BindingType;
import sacred.alliance.magic.base.DateTimeBean;
import sacred.alliance.magic.constant.FormatConstant;
import sacred.alliance.magic.domain.GoodsBase;
import sacred.alliance.magic.util.DateConverter;
import sacred.alliance.magic.util.Log4jManager;
import sacred.alliance.magic.util.Util;
import sacred.alliance.magic.util.Wildcard;
import sacred.alliance.magic.vo.RoleInstance;

import com.game.draco.GameContext;
import com.google.common.collect.Maps;
/**
 * 增加了sortId来区分是罗盘类型
 * 幸运转盘随机物品为12个
 * 之后每一个不同的sortID类型会对应一个Compass类
 */
public @Data class Compass {
	
	private short sortId;       //Id
	private short id;           //ID
	private String name;        //罗盘名称
	private short imageId;        //图片ID
	private int minLevel;       //需要角色等级
	private String startDateAbs;//绝对开启日期
	private String endDateAbs;  //绝对结束日期
	private int startDateRel;   //相对开启日期
	private int endDateRel;     //相对结束日期
	private String desc;        //活动说明
	private int award1;         //奖励1的ID
	private int num1;           //奖励1的数量
	private int odds1;          //奖励1的概率
	private byte bind1 = BindingType.template.getType();//奖励1绑定类型
	private String broadcastInfo1;//广播消息（有则发）
	private int award2;
	private int num2;
	private int odds2;
	private byte bind2 = BindingType.template.getType();
	private String broadcastInfo2;
	private int award3;
	private int num3;
	private int odds3;
	private byte bind3 = BindingType.template.getType();
	private String broadcastInfo3;
	private int award4;
	private int num4;
	private int odds4;
	private byte bind4 = BindingType.template.getType();
	private String broadcastInfo4;	
	private int award5;
	private int num5;
	private int odds5;
	private byte bind5 = BindingType.template.getType();
	private String broadcastInfo5;
	private int award6;
	private int num6;
	private int odds6;
	private byte bind6 = BindingType.template.getType();
	private String broadcastInfo6;
	private int award7;
	private int num7;
	private int odds7;
	private byte bind7 = BindingType.template.getType();
	private String broadcastInfo7;
	private int award8;
	private int num8;
	private int odds8;
	private byte bind8 = BindingType.template.getType();
	private String broadcastInfo8;
	private int award9;
	private int num9;
	private int odds9;
	private byte bind9 = BindingType.template.getType();
	private String broadcastInfo9;
	private int award10;
	private int num10;
	private int odds10;
	private byte bind10 = BindingType.template.getType();
	private String broadcastInfo10;
	private int award11;
	private int num11;
	private int odds11;
	private byte bind11 = BindingType.template.getType();
	private String broadcastInfo11;
	private int award12;
	private int num12;
	private int odds12;
	private byte bind12 = BindingType.template.getType();
	private String broadcastInfo12;
	
	private int goodsId1;    //道具模板ID，可以免费使用
	private int number1;     //转几次
	private float singleGoldMoney1;      //单次消耗的金币（钻石
	
	private int goodsId2;    //道具模板ID，可以免费使用
	private int number2;     //转几次
	private float singleGoldMoney2;      //单次消耗的金币（钻石
	
	private int goodsId3;    //道具模板ID，可以免费使用
	private int number3;     //转几次
	private float singleGoldMoney3;      //单次消耗的金币（钻石
	
	
	private String compassActivityInfo;      //活动说明
	private String compassRewardPointsExchangeRateInfo;      //积分兑换说明
	
	
//	private int rewardPointsExchangeRate;//积分兑换钻石比率，正整数
	
	//消耗列表,要保证顺序
	private Map<Integer,CompassConsumeConfig> consumeMap = Maps.newLinkedHashMap();
	//概率列表
    private HashMap<Integer,Integer> oddsMap = new HashMap<Integer,Integer>();
	
	//开启时间（启动时构建）
	private Date startDate;
	private Date endDate;
	//奖励列表
	private List<CompassAward> awardList = new ArrayList<CompassAward>();
	//抽奖map【KEY:位置 VALUE:概率】
	private HashMap<Integer,Integer> placeMap = new HashMap<Integer,Integer>();
	
	private CompassLogic compassLogic = null ;
	
	

	public Map<Integer,CompassConsumeConfig> getConsumeMap(){
		return consumeMap;
	}


	/**
	 * 根据转动的次数，获得消耗信息，金钱，券等
	 * @param count
	 * @return
	 * @author gaibaoning@moogame.cn
	 * @date 2014-3-31 上午11:55:27 
	 */
	public CompassConsumeConfig getCompassConsumeConfig(int count){
		return consumeMap.get(count);
	}
	
	/**
	 * debug
	 * @return
	 */
	public String toSimpleString(){
		return "[sortId = "+sortId+",id = "+id+",name = "+name+ ",consumeList = "+consumeMap.toString()+"]";
	}
	/**
	 * 加载时初始化奖励信息
	 * 或得逻辑类
	 */
	public void init(){
		String info = "load compass error: id=" + this.id + ".";
	
       //l转换时间格式
		DateTimeBean bean = DateConverter.getDateTimeBean(this.startDateRel, this.endDateRel, this.startDateAbs, this.endDateAbs, FormatConstant.DEFAULT_YMD);
		if(null == bean){
			this.checkFail(info + "The startDateRel/endDateRel/startDateAbs/endDateAbs is error.");
		}
		this.startDate = bean.getStartDate();
		this.endDate = bean.getEndDate();
		if(null == this.startDate || null == this.endDate){
			this.checkFail(info + "Please config the start time or the end time.");
		}
		//初始化消耗列表
		this.buildConsumeList(goodsId1, number1, this.singleGoldMoney1);
		this.buildConsumeList(goodsId2, number2, this.singleGoldMoney2);
		this.buildConsumeList(goodsId3, number3, this.singleGoldMoney3);
		//初始化奖励对象
		this.buildAwardList(this.award1, this.num1, this.odds1, this.bind1, this.broadcastInfo1);
		this.buildAwardList(this.award2, this.num2, this.odds2, this.bind2, this.broadcastInfo2);
		this.buildAwardList(this.award3, this.num3, this.odds3, this.bind3, this.broadcastInfo3);
		this.buildAwardList(this.award4, this.num4, this.odds4, this.bind4, this.broadcastInfo4);
		this.buildAwardList(this.award5, this.num5, this.odds5, this.bind5, this.broadcastInfo5);
		this.buildAwardList(this.award6, this.num6, this.odds6, this.bind6, this.broadcastInfo6);
		this.buildAwardList(this.award7, this.num7, this.odds7, this.bind7, this.broadcastInfo7);
		this.buildAwardList(this.award8, this.num8, this.odds8, this.bind8, this.broadcastInfo8);
		this.buildAwardList(this.award9, this.num9, this.odds9, this.bind9, this.broadcastInfo9);
		this.buildAwardList(this.award10, this.num10, this.odds10, this.bind10, this.broadcastInfo10);
		this.buildAwardList(this.award11, this.num11, this.odds11, this.bind11, this.broadcastInfo11);
		this.buildAwardList(this.award12, this.num12, this.odds12, this.bind12, this.broadcastInfo12);
		//构建奖励的权重Map
		this.buildPlaceMap();
		//检测物品配置
		this.checkAwardGoods();
		//获得逻辑类
		CompassLogicType logicType = CompassLogicType.get(this.sortId);
		if(null != logicType){
			this.compassLogic = logicType.createCompassLogic();
		}
		if(null == this.compassLogic){
			this.checkFail(info + " the sortId config error");
		}
	}
	/**
	 * 创建消耗列表转动次数和金币要判断是否为正值，幸运卷轴的Id是否存在
	 * @param goodsId   幸运卷轴
	 * @param number    转动几次
	 * @param goldMoney 消耗金币
	 * @author gaibaoning@moogame.cn
	 * @date 2014-3-25 下午05:25:56 
	 * @version V1.0
	 */
	private void buildConsumeList(int goodsId, int number, float singleGoldMoney){
		String info = "load compass error: id=" + this.id + ".";
		if(goodsId > 0){
			if(null == GameContext.getGoodsApp().getGoodsBase(goodsId)){
				this.checkFail(info + "goodsId=" + goodsId + ",this goods is not exist!");
			}
		}
		if(number <= 0 || singleGoldMoney <= 0.0f){
			this.checkFail(info + " number = "+number+", singleGoldMoney = "+ singleGoldMoney+"  load params error.");
		}
		
		CompassConsumeConfig config = new CompassConsumeConfig();
		config.setGoodsId(goodsId);
		config.setNumber(number);
		config.setSingleGoldMoney(singleGoldMoney);
		this.consumeMap.put(number, config);
	}
	/**
	 * 构建奖励列表
	 * @param awardId
	 * @param num
	 * @param odds
	 * @param bind
	 * @param broadcastInfo
	 */
	private void buildAwardList(int awardId, int num, int odds, byte bind, String broadcastInfo){
		String info = "load compass error: id=" + this.id + ".";
		if(awardId <= 0 || num <= 0 || odds <= 0){
			this.checkFail(info + "awardId=" + awardId + ",awardId or num or odds config error.");
		}
		this.awardList.add(new CompassAward(awardId, num, odds, bind, this.getBroadcastInfo(broadcastInfo, awardId)));
	}
	
	/**
	 * 构建广播消息（替换通配符）
	 * @param broadcastInfo
	 * @param awardId
	 * @return
	 */
	private String getBroadcastInfo(String broadcastInfo, int awardId){
		if(Util.isEmpty(broadcastInfo)){
			return "";
		}
		return broadcastInfo.replace(Wildcard.Compass_Name, this.name).replace(Wildcard.GoodsName,
				Wildcard.getChatGoodsContent(awardId, ChannelType.Publicize_Personal));
	}
	
	/**
	 * 初始化抽奖map
	 * 从0开始
	 * 淘宝原来是从1开始
	 */
	private void buildPlaceMap(){
		this.placeMap.put(0, this.odds1);
		this.placeMap.put(1, this.odds2);
		this.placeMap.put(2, this.odds3);
		this.placeMap.put(3, this.odds4);
		this.placeMap.put(4, this.odds5);
		this.placeMap.put(5, this.odds6);
		this.placeMap.put(6, this.odds7);
		this.placeMap.put(7, this.odds8);
		this.placeMap.put(8, this.odds9);
		this.placeMap.put(9, this.odds10);
		this.placeMap.put(10, this.odds11);
		this.placeMap.put(11, this.odds12);
	}
	
	/**
	 * 可以配置相同的物品模板，但绑定类型必须相同
	 */
	private void checkAwardGoods(){
		Map<Integer, Integer> awardMap = new HashMap<Integer, Integer>();//验证物品集合
		for(CompassAward award : this.awardList){
			int goodsId = award.getAward();
			GoodsBase goodsBase = GameContext.getGoodsApp().getGoodsBase(goodsId);
			if(null == goodsBase){
				this.checkFail("load compass error: goodsId=" + goodsId + ".the goods is not exist.");
			}
			int bindType = award.getBindType();
			if(awardMap.containsKey(goodsId) && awardMap.get(goodsId) != bindType){
				this.checkFail("load compass error: goodsId=" + goodsId + ".the same goods have different bind.");
			}
			awardMap.put(goodsId, bindType);
		}
	}
	
	private void checkFail(String info){
		Log4jManager.CHECK.error(info);
		Log4jManager.checkFail();
	}
	
	/**
	 * 是否满足等级要求
	 * @param role
	 * @return
	 */
	public boolean isSuitLevel(RoleInstance role){
		if(null == role){
			return false;
		}
		return role.getLevel() >= this.minLevel;
	}
	
	/**
	 * 活动时间是否开启
	 */
	public boolean isTimeOpen(){
		Date now = new Date();
		return now.after(this.startDate) && now.before(this.endDate);
	}
	
	/**
	 * 淘宝
	 * 重置概率
	 */
	public void resetOdds(){
		this.awardList.get(0).setOdds(this.odds1);
		this.awardList.get(1).setOdds(this.odds2);
		this.awardList.get(2).setOdds(this.odds3);
		this.awardList.get(3).setOdds(this.odds4);
		this.awardList.get(4).setOdds(this.odds5);
		this.awardList.get(5).setOdds(this.odds6);
		this.awardList.get(6).setOdds(this.odds7);
		this.awardList.get(7).setOdds(this.odds8);
		this.awardList.get(8).setOdds(this.odds9);
		this.awardList.get(9).setOdds(this.odds10);
		this.awardList.get(10).setOdds(this.odds11);
		this.awardList.get(11).setOdds(this.odds12);
		this.buildPlaceMap();
	}
	
}
