//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.3 in JDK 1.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.12.29 at 09:17:16 上午 CST 
//
package sacred.alliance.magic.app.map.point;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

import sacred.alliance.magic.app.map.Map;
import sacred.alliance.magic.app.map.MapApp;
import sacred.alliance.magic.base.ChangeMapEvent;
import sacred.alliance.magic.base.RoleType;
import sacred.alliance.magic.constant.MapConstant;
import sacred.alliance.magic.constant.TextId;
import sacred.alliance.magic.core.exception.ServiceException;
import sacred.alliance.magic.util.Util;
import sacred.alliance.magic.vo.AbstractRole;
import sacred.alliance.magic.vo.Point;
import sacred.alliance.magic.vo.RoleInstance;

import com.game.draco.GameContext;
import com.game.draco.message.push.C0003_TipNotifyMessage;

/**
 * <p>
 * Java class for JumpMapPoint complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;complexType name="JumpMapPoint">
 *   &lt;complexContent>
 *     &lt;extension base="{}EventPoint">
 *       &lt;attribute name="tomapid" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="level" type="{http://www.w3.org/2001/XMLSchema}unsignedShort" />
 *       &lt;attribute name="destX" type="{http://www.w3.org/2001/XMLSchema}unsignedShort" />
 *       &lt;attribute name="destY" type="{http://www.w3.org/2001/XMLSchema}unsignedShort" />
 *       &lt;attribute name="questid" type="{http://www.w3.org/2001/XMLSchema}unsignedShort" />
 *       &lt;attribute name="goodsid" type="{http://www.w3.org/2001/XMLSchema}unsignedShort" />
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlRootElement(name = "jumpmappoint")
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "JumpMapPoint")
public class JumpMapPoint extends EventPoint {

	@XmlAttribute
	protected String tomapid;
	@XmlAttribute
	protected int level;
	@XmlAttribute
	protected int desX;
	@XmlAttribute
	protected int desY;
	@XmlAttribute
	protected int questid;
	@XmlAttribute
	protected int goodsid;
	@XmlAttribute
	protected int tocamp = -1;// -1都可  1：同盟  0：帝国

	public JumpMapPoint() {
	}

	public JumpMapPoint(int x, int y, int level, int questId, int goodsId,
			String toMapId, int desX, int desY,int tocamp) {
		super(x, y);
		this.tomapid = toMapId;
		this.level = level;
		this.questid = questId;
		this.goodsid = goodsId;
		this.desX = desX;
		this.desY = desY;
		this.tocamp = tocamp;
	}

	public String getTomapid() {
		return tomapid;
	}

	public void setTomapid(String tomapid) {
		this.tomapid = tomapid;
	}

	public int getLevel() {
		return level;
	}

	public void setLevel(int level) {
		this.level = level;
	}

	public int getQuestid() {
		return questid;
	}

	public void setQuestid(int questid) {
		this.questid = questid;
	}

	public int getGoodsid() {
		return goodsid;
	}

	public void setGoodsid(int goodsid) {
		this.goodsid = goodsid;
	}

	@Override
	public String isSatisfyCond(AbstractRole role){
		if (null == role) {
			return FALSE;
		}
		if (role.getRoleType() != RoleType.PLAYER) {
			return FALSE;
		}
		if (role.getLevel() < level) {
			return FALSE;
		}

		// 事件点的触发有可能会改变当前地图,则下面的逻辑不能再执行
		if (!role.getMapId().equals(mapid)) {
			return FALSE;
		}
		// 判断坐标是否符合
		if (!Util.inCircle(x, y, role.getMapX(), role.getMapY(),
				MapConstant.JUMP_POINT_EFFECT_RADIOS)) {
			return FALSE;
		}
		
		RoleInstance player = (RoleInstance)role ;
		/**
		 * 
		 * 是否完成了任务 是否拥有某个物品
		 */
		if (questid > 0) {
			if (!player.hasFinishQuest(this.questid)) {
				return FALSE;
			}
		}
		if (goodsid > 0) {
			if (!GameContext.getUserGoodsApp().isExistGoodsForBag(player, goodsid)); {
				return FALSE;
			}
		}
		MapApp mapApp = GameContext.getMapApp();
		Map toMap = mapApp.getMap(tomapid);
		if(null == toMap){
			//目标地图不存在
			return FALSE ;
		}

		/*** 副本进入下一层判断逻辑 **/
		if(this.isOnCopyMap(role)){
			String result = GameContext.getCopyLogicApp().isCopyPass((RoleInstance)role);
			if(!Util.isEmpty(result)){
				this.notifyPointMessage(result, player);
				return FALSE;
			}
		}
		//判断公会
		if(toMap.getMapConfig().getMapLogicType().isMustUnion() &&
				!player.hasUnion()){
			String text = GameContext.getI18n().messageFormat(TextId.map_havenot_union_canot_enter,
					toMap.getMapConfig().getMapdisplayname());
			this.notifyPointMessage(text, player);
			return FALSE ;
		}
		return TRUE;
	}
	
	
	private boolean isOnCopyMap(AbstractRole role){
		return role.getMapInstance().getMap().getMapConfig().iscopymode();
	}
	
			
	protected void notifyPointMessage(String message,RoleInstance role){
		if(Util.isEmpty(message)){
			return ;
		}
		C0003_TipNotifyMessage msg = new C0003_TipNotifyMessage();
		msg.setMsgContext(message);
		role.getBehavior().sendMessage(msg);
	}
	
	@Override
	public void trigger(AbstractRole role) throws ServiceException {
		boolean same = role.getMapId().equals(tomapid);
		role.getBehavior().changeMap(new Point(tomapid, desX, desY,
				same?ChangeMapEvent.changeInSamemap.getEventType():ChangeMapEvent.defaultEvent.getEventType()));
	}

	public int getDesX() {
		return desX;
	}

	public void setDesX(int desX) {
		this.desX = desX;
	}

	public int getDesY() {
		return desY;
	}

	public void setDesY(int desY) {
		this.desY = desY;
	}

	public int getTocamp() {
		return tocamp;
	}

	public void setTocamp(int tocamp) {
		this.tocamp = tocamp;
	}
}
